package de.vorb.leptonica;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This accumulates data for generating a pdf of a single page consisting<br>
 *  of an arbitrary number of images.<br>
 * *  None of the strings have a trailing newline.<br>
 * <i>native declaration : C:\Users\Paul\Studium\Masterarbeit\Entwicklung\VS2013\tesseract-vs2013\liblept\include\imageio.h:138</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class L_Pdf_Data extends Structure {
	/**
	 * optional title for pdf<br>
	 * C type : char*
	 */
	public Pointer title;
	/**
	 * number of images<br>
	 * C type : l_int32
	 */
	public int n;
	/**
	 * number of colormaps<br>
	 * C type : l_int32
	 */
	public int ncmap;
	/**
	 * array of compressed image data<br>
	 * C type : L_Ptra*
	 */
	public de.vorb.leptonica.L_Ptra.ByReference cida;
	/**
	 * %PDF-1.2 id string<br>
	 * C type : char*
	 */
	public Pointer id;
	/**
	 * catalog string<br>
	 * C type : char*
	 */
	public Pointer obj1;
	/**
	 * metadata string<br>
	 * C type : char*
	 */
	public Pointer obj2;
	/**
	 * pages string<br>
	 * C type : char*
	 */
	public Pointer obj3;
	/**
	 * page string (variable data)<br>
	 * C type : char*
	 */
	public Pointer obj4;
	/**
	 * content string (variable data)<br>
	 * C type : char*
	 */
	public Pointer obj5;
	/**
	 * post-binary-stream string<br>
	 * C type : char*
	 */
	public Pointer poststream;
	/**
	 * trailer string (variable data)<br>
	 * C type : char*
	 */
	public Pointer trailer;
	/**
	 * store (xpt, ypt) array<br>
	 * C type : Pta*
	 */
	public de.vorb.leptonica.Pta.ByReference xy;
	/**
	 * store (wpt, hpt) array<br>
	 * C type : Pta*
	 */
	public de.vorb.leptonica.Pta.ByReference wh;
	/**
	 * bounding region for all images<br>
	 * C type : Box*
	 */
	public de.vorb.leptonica.Box.ByReference mediabox;
	/**
	 * pre-binary-stream xobject strings<br>
	 * C type : Sarray*
	 */
	public de.vorb.leptonica.Sarray.ByReference saprex;
	/**
	 * colormap pdf object strings<br>
	 * C type : Sarray*
	 */
	public de.vorb.leptonica.Sarray.ByReference sacmap;
	/**
	 * sizes of each pdf string object<br>
	 * C type : L_Dna*
	 */
	public de.vorb.leptonica.L_Dna.ByReference objsize;
	/**
	 * location of each pdf string object<br>
	 * C type : L_Dna*
	 */
	public de.vorb.leptonica.L_Dna.ByReference objloc;
	/**
	 * location of xref<br>
	 * C type : l_int32
	 */
	public int xrefloc;
	public L_Pdf_Data() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("title", "n", "ncmap", "cida", "id", "obj1", "obj2", "obj3", "obj4", "obj5", "poststream", "trailer", "xy", "wh", "mediabox", "saprex", "sacmap", "objsize", "objloc", "xrefloc");
	}
	public static class ByReference extends L_Pdf_Data implements Structure.ByReference {
		
	};
	public static class ByValue extends L_Pdf_Data implements Structure.ByValue {
		
	};
}
