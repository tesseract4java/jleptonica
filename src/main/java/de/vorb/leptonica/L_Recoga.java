package de.vorb.leptonica;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : C:\Users\Paul\Studium\Masterarbeit\Entwicklung\VS2013\tesseract-vs2013\liblept\include\recog.h:89</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class L_Recoga extends Structure {
	/**
	 * number of recogs<br>
	 * C type : l_int32
	 */
	public int n;
	/**
	 * number of recog ptrs allocated<br>
	 * C type : l_int32
	 */
	public int nalloc;
	/**
	 * recog ptr array<br>
	 * C type : L_Recog**
	 */
	public de.vorb.leptonica.L_Recog.ByReference[] recog;
	/**
	 * stores the array of best chars<br>
	 * C type : L_Rcha*
	 */
	public de.vorb.leptonica.L_Rcha.ByReference rcha;
	public L_Recoga() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("n", "nalloc", "recog", "rcha");
	}
	/**
	 * @param n number of recogs<br>
	 * C type : l_int32<br>
	 * @param nalloc number of recog ptrs allocated<br>
	 * C type : l_int32<br>
	 * @param recog recog ptr array<br>
	 * C type : L_Recog**<br>
	 * @param rcha stores the array of best chars<br>
	 * C type : L_Rcha*
	 */
	public L_Recoga(int n, int nalloc, de.vorb.leptonica.L_Recog.ByReference recog[], de.vorb.leptonica.L_Rcha.ByReference rcha) {
		super();
		this.n = n;
		this.nalloc = nalloc;
		if ((recog.length != this.recog.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.recog = recog;
		this.rcha = rcha;
	}
	public static class ByReference extends L_Recoga implements Structure.ByReference {
		
	};
	public static class ByValue extends L_Recoga implements Structure.ByValue {
		
	};
}
