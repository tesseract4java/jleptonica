package de.vorb.leptonica;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * The JbClasser struct holds all the data accumulated during the<br>
 * classification process that can be used for a compressed<br>
 * jbig2-type representation of a set of images.  This is created<br>
 * in an initialization process and added to as the selected components<br>
 * on each successive page are analyzed.<br>
 * <i>native declaration : C:\Users\Paul\Studium\Masterarbeit\Entwicklung\VS2013\tesseract-vs2013\liblept\include\jbclass.h:43</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class JbClasser extends Structure {
	/**
	 * input page image file names<br>
	 * C type : Sarray*
	 */
	public de.vorb.leptonica.Sarray.ByReference safiles;
	/**
	 * JB_RANKHAUS, JB_CORRELATION<br>
	 * C type : l_int32
	 */
	public int method;
	/**
	 * JB_CONN_COMPS, JB_CHARACTERS or<br>
	 * C type : l_int32
	 */
	public int components;
	/**
	 * JB_WORDS<br>
	 * max component width allowed<br>
	 * C type : l_int32
	 */
	public int maxwidth;
	/**
	 * max component height allowed<br>
	 * C type : l_int32
	 */
	public int maxheight;
	/**
	 * number of pages already processed<br>
	 * C type : l_int32
	 */
	public int npages;
	/**
	 * number of components already processed<br>
	 * C type : l_int32
	 */
	public int baseindex;
	/**
	 * on fully processed pages<br>
	 * number of components on each page<br>
	 * C type : Numa*
	 */
	public de.vorb.leptonica.Numa.ByReference nacomps;
	/**
	 * size of square struct element for haus<br>
	 * C type : l_int32
	 */
	public int sizehaus;
	/**
	 * rank val of haus match, each way<br>
	 * C type : l_float32
	 */
	public float rankhaus;
	/**
	 * thresh value for correlation score<br>
	 * C type : l_float32
	 */
	public float thresh;
	/**
	 * corrects thresh value for heaver<br>
	 * C type : l_float32
	 */
	public float weightfactor;
	/**
	 * components; use 0 for no correction<br>
	 * w * h of each template, without extra<br>
	 * C type : Numa*
	 */
	public de.vorb.leptonica.Numa.ByReference naarea;
	/**
	 * border pixels<br>
	 * max width of original src images<br>
	 * C type : l_int32
	 */
	public int w;
	/**
	 * max height of original src images<br>
	 * C type : l_int32
	 */
	public int h;
	/**
	 * current number of classes<br>
	 * C type : l_int32
	 */
	public int nclass;
	/**
	 * If zero, pixaa isn't filled<br>
	 * C type : l_int32
	 */
	public int keep_pixaa;
	/**
	 * instances for each class; unbordered<br>
	 * C type : Pixaa*
	 */
	public de.vorb.leptonica.Pixaa.ByReference pixaa;
	/**
	 * templates for each class; bordered<br>
	 * C type : Pixa*
	 */
	public de.vorb.leptonica.Pixa.ByReference pixat;
	/**
	 * and not dilated<br>
	 * templates for each class; bordered<br>
	 * C type : Pixa*
	 */
	public de.vorb.leptonica.Pixa.ByReference pixatd;
	/**
	 * and dilated<br>
	 * Hash table to find templates by size<br>
	 * C type : NumaHash*
	 */
	public de.vorb.leptonica.NumaHash.ByReference nahash;
	/**
	 * fg areas of undilated templates;<br>
	 * C type : Numa*
	 */
	public de.vorb.leptonica.Numa.ByReference nafgt;
	/**
	 * only used for rank < 1.0<br>
	 * centroids of all bordered cc<br>
	 * C type : Pta*
	 */
	public de.vorb.leptonica.Pta.ByReference ptac;
	/**
	 * centroids of all bordered template cc<br>
	 * C type : Pta*
	 */
	public de.vorb.leptonica.Pta.ByReference ptact;
	/**
	 * array of class ids for each component<br>
	 * C type : Numa*
	 */
	public de.vorb.leptonica.Numa.ByReference naclass;
	/**
	 * array of page nums for each component<br>
	 * C type : Numa*
	 */
	public de.vorb.leptonica.Numa.ByReference napage;
	/**
	 * array of UL corners at which the<br>
	 * C type : Pta*
	 */
	public de.vorb.leptonica.Pta.ByReference ptaul;
	/**
	 * component<br>
	 * similar to ptaul, but for LL corners<br>
	 * C type : Pta*
	 */
	public de.vorb.leptonica.Pta.ByReference ptall;
	public JbClasser() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("safiles", "method", "components", "maxwidth", "maxheight", "npages", "baseindex", "nacomps", "sizehaus", "rankhaus", "thresh", "weightfactor", "naarea", "w", "h", "nclass", "keep_pixaa", "pixaa", "pixat", "pixatd", "nahash", "nafgt", "ptac", "ptact", "naclass", "napage", "ptaul", "ptall");
	}
	public static class ByReference extends JbClasser implements Structure.ByReference {
		
	};
	public static class ByValue extends JbClasser implements Structure.ByValue {
		
	};
}
