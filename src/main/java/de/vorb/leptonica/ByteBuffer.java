package de.vorb.leptonica;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : C:\Users\Paul\Studium\Masterarbeit\Entwicklung\VS2013\tesseract-vs2013\liblept\include\bbuffer.h:47</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ByteBuffer extends Structure {
	/**
	 * size of allocated byte array<br>
	 * C type : l_int32
	 */
	public int nalloc;
	/**
	 * number of bytes read into to the array<br>
	 * C type : l_int32
	 */
	public int n;
	/**
	 * number of bytes written from the array<br>
	 * C type : l_int32
	 */
	public int nwritten;
	/**
	 * byte array<br>
	 * C type : l_uint8*
	 */
	public Pointer array;
	public ByteBuffer() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("nalloc", "n", "nwritten", "array");
	}
	/**
	 * @param nalloc size of allocated byte array<br>
	 * C type : l_int32<br>
	 * @param n number of bytes read into to the array<br>
	 * C type : l_int32<br>
	 * @param nwritten number of bytes written from the array<br>
	 * C type : l_int32<br>
	 * @param array byte array<br>
	 * C type : l_uint8*
	 */
	public ByteBuffer(int nalloc, int n, int nwritten, Pointer array) {
		super();
		this.nalloc = nalloc;
		this.n = n;
		this.nwritten = nwritten;
		this.array = array;
	}
	public static class ByReference extends ByteBuffer implements Structure.ByReference {
		
	};
	public static class ByValue extends ByteBuffer implements Structure.ByValue {
		
	};
}
