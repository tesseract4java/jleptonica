package de.vorb.leptonica;

import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

/**
 * <i>native declaration :
 * C:\Users\Paul\Studium\Masterarbeit\Entwicklung\VS2013\
 * tesseract-vs2013\liblept\include\dewarp.h:128</i><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a
 * href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("leptonica")
public class L_Dewarp extends StructObject {
    static {
        BridJ.register();
    }

    /**
     * ptr to parent (not owned)<br>
     * C type : L_Dewarpa*
     */
    @Field(0)
    public Pointer<L_Dewarpa> dewa() {
        return this.io.getPointerField(this, 0);
    }

    /**
     * ptr to parent (not owned)<br>
     * C type : L_Dewarpa*
     */
    @Field(0)
    public L_Dewarp dewa(Pointer<L_Dewarpa> dewa) {
        this.io.setPointerField(this, 0, dewa);
        return this;
    }

    /**
     * source pix, 1 bpp<br>
     * C type : Pix*
     */
    @Field(1)
    public Pointer<Pix> pixs() {
        return this.io.getPointerField(this, 1);
    }

    /**
     * source pix, 1 bpp<br>
     * C type : Pix*
     */
    @Field(1)
    public L_Dewarp pixs(Pointer<Pix> pixs) {
        this.io.setPointerField(this, 1, pixs);
        return this;
    }

    /**
     * sampled vert disparity array<br>
     * C type : FPix*
     */
    @Field(2)
    public Pointer<FPix> sampvdispar() {
        return this.io.getPointerField(this, 2);
    }

    /**
     * sampled vert disparity array<br>
     * C type : FPix*
     */
    @Field(2)
    public L_Dewarp sampvdispar(Pointer<FPix> sampvdispar) {
        this.io.setPointerField(this, 2, sampvdispar);
        return this;
    }

    /**
     * sampled horiz disparity array<br>
     * C type : FPix*
     */
    @Field(3)
    public Pointer<FPix> samphdispar() {
        return this.io.getPointerField(this, 3);
    }

    /**
     * sampled horiz disparity array<br>
     * C type : FPix*
     */
    @Field(3)
    public L_Dewarp samphdispar(Pointer<FPix> samphdispar) {
        this.io.setPointerField(this, 3, samphdispar);
        return this;
    }

    /**
     * full vert disparity array<br>
     * C type : FPix*
     */
    @Field(4)
    public Pointer<FPix> fullvdispar() {
        return this.io.getPointerField(this, 4);
    }

    /**
     * full vert disparity array<br>
     * C type : FPix*
     */
    @Field(4)
    public L_Dewarp fullvdispar(Pointer<FPix> fullvdispar) {
        this.io.setPointerField(this, 4, fullvdispar);
        return this;
    }

    /**
     * full horiz disparity array<br>
     * C type : FPix*
     */
    @Field(5)
    public Pointer<FPix> fullhdispar() {
        return this.io.getPointerField(this, 5);
    }

    /**
     * full horiz disparity array<br>
     * C type : FPix*
     */
    @Field(5)
    public L_Dewarp fullhdispar(Pointer<FPix> fullhdispar) {
        this.io.setPointerField(this, 5, fullhdispar);
        return this;
    }

    /**
     * sorted y val of midpoint each line<br>
     * C type : Numa*
     */
    @Field(6)
    public Pointer<Numa> namidys() {
        return this.io.getPointerField(this, 6);
    }

    /**
     * sorted y val of midpoint each line<br>
     * C type : Numa*
     */
    @Field(6)
    public L_Dewarp namidys(Pointer<Numa> namidys) {
        this.io.setPointerField(this, 6, namidys);
        return this;
    }

    /**
     * sorted curvature of each line<br>
     * C type : Numa*
     */
    @Field(7)
    public Pointer<Numa> nacurves() {
        return this.io.getPointerField(this, 7);
    }

    /**
     * sorted curvature of each line<br>
     * C type : Numa*
     */
    @Field(7)
    public L_Dewarp nacurves(Pointer<Numa> nacurves) {
        this.io.setPointerField(this, 7, nacurves);
        return this;
    }

    /**
     * width of source image<br>
     * C type : l_int32
     */
    @Field(8)
    public int w() {
        return this.io.getIntField(this, 8);
    }

    /**
     * width of source image<br>
     * C type : l_int32
     */
    @Field(8)
    public L_Dewarp w(int w) {
        this.io.setIntField(this, 8, w);
        return this;
    }

    /**
     * height of source image<br>
     * C type : l_int32
     */
    @Field(9)
    public int h() {
        return this.io.getIntField(this, 9);
    }

    /**
     * height of source image<br>
     * C type : l_int32
     */
    @Field(9)
    public L_Dewarp h(int h) {
        this.io.setIntField(this, 9, h);
        return this;
    }

    /**
     * page number; important for reuse<br>
     * C type : l_int32
     */
    @Field(10)
    public int pageno() {
        return this.io.getIntField(this, 10);
    }

    /**
     * page number; important for reuse<br>
     * C type : l_int32
     */
    @Field(10)
    public L_Dewarp pageno(int pageno) {
        this.io.setIntField(this, 10, pageno);
        return this;
    }

    /**
     * sampling factor of disparity arrays<br>
     * C type : l_int32
     */
    @Field(11)
    public int sampling() {
        return this.io.getIntField(this, 11);
    }

    /**
     * sampling factor of disparity arrays<br>
     * C type : l_int32
     */
    @Field(11)
    public L_Dewarp sampling(int sampling) {
        this.io.setIntField(this, 11, sampling);
        return this;
    }

    /**
     * reduction factor of pixs: 1 or 2<br>
     * C type : l_int32
     */
    @Field(12)
    public int redfactor() {
        return this.io.getIntField(this, 12);
    }

    /**
     * reduction factor of pixs: 1 or 2<br>
     * C type : l_int32
     */
    @Field(12)
    public L_Dewarp redfactor(int redfactor) {
        this.io.setIntField(this, 12, redfactor);
        return this;
    }

    /**
     * min number of long lines required<br>
     * C type : l_int32
     */
    @Field(13)
    public int minlines() {
        return this.io.getIntField(this, 13);
    }

    /**
     * min number of long lines required<br>
     * C type : l_int32
     */
    @Field(13)
    public L_Dewarp minlines(int minlines) {
        this.io.setIntField(this, 13, minlines);
        return this;
    }

    /**
     * number of long lines found<br>
     * C type : l_int32
     */
    @Field(14)
    public int nlines() {
        return this.io.getIntField(this, 14);
    }

    /**
     * number of long lines found<br>
     * C type : l_int32
     */
    @Field(14)
    public L_Dewarp nlines(int nlines) {
        this.io.setIntField(this, 14, nlines);
        return this;
    }

    /**
     * min line curvature in micro-units<br>
     * C type : l_int32
     */
    @Field(15)
    public int mincurv() {
        return this.io.getIntField(this, 15);
    }

    /**
     * min line curvature in micro-units<br>
     * C type : l_int32
     */
    @Field(15)
    public L_Dewarp mincurv(int mincurv) {
        this.io.setIntField(this, 15, mincurv);
        return this;
    }

    /**
     * max line curvature in micro-units<br>
     * C type : l_int32
     */
    @Field(16)
    public int maxcurv() {
        return this.io.getIntField(this, 16);
    }

    /**
     * max line curvature in micro-units<br>
     * C type : l_int32
     */
    @Field(16)
    public L_Dewarp maxcurv(int maxcurv) {
        this.io.setIntField(this, 16, maxcurv);
        return this;
    }

    /**
     * left edge curvature in micro-units<br>
     * C type : l_int32
     */
    @Field(17)
    public int leftcurv() {
        return this.io.getIntField(this, 17);
    }

    /**
     * left edge curvature in micro-units<br>
     * C type : l_int32
     */
    @Field(17)
    public L_Dewarp leftcurv(int leftcurv) {
        this.io.setIntField(this, 17, leftcurv);
        return this;
    }

    /**
     * right edge curvature in micro-units<br>
     * C type : l_int32
     */
    @Field(18)
    public int rightcurv() {
        return this.io.getIntField(this, 18);
    }

    /**
     * right edge curvature in micro-units<br>
     * C type : l_int32
     */
    @Field(18)
    public L_Dewarp rightcurv(int rightcurv) {
        this.io.setIntField(this, 18, rightcurv);
        return this;
    }

    /**
     * number of sampling pts in x-dir<br>
     * C type : l_int32
     */
    @Field(19)
    public int nx() {
        return this.io.getIntField(this, 19);
    }

    /**
     * number of sampling pts in x-dir<br>
     * C type : l_int32
     */
    @Field(19)
    public L_Dewarp nx(int nx) {
        this.io.setIntField(this, 19, nx);
        return this;
    }

    /**
     * number of sampling pts in y-dir<br>
     * C type : l_int32
     */
    @Field(20)
    public int ny() {
        return this.io.getIntField(this, 20);
    }

    /**
     * number of sampling pts in y-dir<br>
     * C type : l_int32
     */
    @Field(20)
    public L_Dewarp ny(int ny) {
        this.io.setIntField(this, 20, ny);
        return this;
    }

    /**
     * 0 if normal; 1 if has a refpage<br>
     * C type : l_int32
     */
    @Field(21)
    public int hasref() {
        return this.io.getIntField(this, 21);
    }

    /**
     * 0 if normal; 1 if has a refpage<br>
     * C type : l_int32
     */
    @Field(21)
    public L_Dewarp hasref(int hasref) {
        this.io.setIntField(this, 21, hasref);
        return this;
    }

    /**
     * page with disparity model to use<br>
     * C type : l_int32
     */
    @Field(22)
    public int refpage() {
        return this.io.getIntField(this, 22);
    }

    /**
     * page with disparity model to use<br>
     * C type : l_int32
     */
    @Field(22)
    public L_Dewarp refpage(int refpage) {
        this.io.setIntField(this, 22, refpage);
        return this;
    }

    /**
     * sets to 1 if vert disparity builds<br>
     * C type : l_int32
     */
    @Field(23)
    public int vsuccess() {
        return this.io.getIntField(this, 23);
    }

    /**
     * sets to 1 if vert disparity builds<br>
     * C type : l_int32
     */
    @Field(23)
    public L_Dewarp vsuccess(int vsuccess) {
        this.io.setIntField(this, 23, vsuccess);
        return this;
    }

    /**
     * sets to 1 if horiz disparity builds<br>
     * C type : l_int32
     */
    @Field(24)
    public int hsuccess() {
        return this.io.getIntField(this, 24);
    }

    /**
     * sets to 1 if horiz disparity builds<br>
     * C type : l_int32
     */
    @Field(24)
    public L_Dewarp hsuccess(int hsuccess) {
        this.io.setIntField(this, 24, hsuccess);
        return this;
    }

    /**
     * sets to 1 if valid vert disparity<br>
     * C type : l_int32
     */
    @Field(25)
    public int vvalid() {
        return this.io.getIntField(this, 25);
    }

    /**
     * sets to 1 if valid vert disparity<br>
     * C type : l_int32
     */
    @Field(25)
    public L_Dewarp vvalid(int vvalid) {
        this.io.setIntField(this, 25, vvalid);
        return this;
    }

    /**
     * sets to 1 if valid horiz disparity<br>
     * C type : l_int32
     */
    @Field(26)
    public int hvalid() {
        return this.io.getIntField(this, 26);
    }

    /**
     * sets to 1 if valid horiz disparity<br>
     * C type : l_int32
     */
    @Field(26)
    public L_Dewarp hvalid(int hvalid) {
        this.io.setIntField(this, 26, hvalid);
        return this;
    }

    /**
     * sets to 1 if debug output requested<br>
     * C type : l_int32
     */
    @Field(27)
    public int debug() {
        return this.io.getIntField(this, 27);
    }

    /**
     * sets to 1 if debug output requested<br>
     * C type : l_int32
     */
    @Field(27)
    public L_Dewarp debug(int debug) {
        this.io.setIntField(this, 27, debug);
        return this;
    }

    public L_Dewarp() {
        super();
    }

    public L_Dewarp(Pointer pointer) {
        super(pointer);
    }
}
