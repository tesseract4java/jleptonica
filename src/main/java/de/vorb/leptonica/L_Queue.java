package de.vorb.leptonica;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : C:\Users\Paul\Studium\Masterarbeit\Entwicklung\VS2013\tesseract-vs2013\liblept\include\queue.h:61</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class L_Queue extends Structure {
	/**
	 * size of allocated ptr array<br>
	 * C type : l_int32
	 */
	public int nalloc;
	/**
	 * location of head (in ptrs) from the<br>
	 * C type : l_int32
	 */
	public int nhead;
	/**
	 * beginning of the array<br>
	 * number of elements stored in the queue<br>
	 * C type : l_int32
	 */
	public int nelem;
	/**
	 * ptr array<br>
	 * C type : void**
	 */
	public PointerByReference array;
	/**
	 * auxiliary stack<br>
	 * C type : L_Stack*
	 */
	public de.vorb.leptonica.L_Stack.ByReference stack;
	public L_Queue() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("nalloc", "nhead", "nelem", "array", "stack");
	}
	/**
	 * @param nalloc size of allocated ptr array<br>
	 * C type : l_int32<br>
	 * @param nhead location of head (in ptrs) from the<br>
	 * C type : l_int32<br>
	 * @param nelem beginning of the array<br>
	 * number of elements stored in the queue<br>
	 * C type : l_int32<br>
	 * @param array ptr array<br>
	 * C type : void**<br>
	 * @param stack auxiliary stack<br>
	 * C type : L_Stack*
	 */
	public L_Queue(int nalloc, int nhead, int nelem, PointerByReference array, de.vorb.leptonica.L_Stack.ByReference stack) {
		super();
		this.nalloc = nalloc;
		this.nhead = nhead;
		this.nelem = nelem;
		this.array = array;
		this.stack = stack;
	}
	public static class ByReference extends L_Queue implements Structure.ByReference {
		
	};
	public static class ByValue extends L_Queue implements Structure.ByValue {
		
	};
}
