package de.vorb.leptonica;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * -------------------------------------------------------------------------*<br>
 *                     Regression test parameter packer                    *<br>
 * -------------------------------------------------------------------------<br>
 * <i>native declaration : C:\Users\Paul\Studium\Masterarbeit\Entwicklung\VS2013\tesseract-vs2013\liblept\include\regutils.h:112</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("leptonica") 
public abstract class L_RegParams extends StructObject {
	static {
		BridJ.register();
	}
	/** Conversion Error : FILE* (failed to convert type to Java (undefined type)) */
	/**
	 * name of test, without '_reg'<br>
	 * C type : char*
	 */
	@Field(1) 
	public Pointer<Byte > testname() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * name of test, without '_reg'<br>
	 * C type : char*
	 */
	@Field(1) 
	public L_RegParams testname(Pointer<Byte > testname) {
		this.io.setPointerField(this, 1, testname);
		return this;
	}
	/**
	 * name of temp file for compare mode output<br>
	 * C type : char*
	 */
	@Field(2) 
	public Pointer<Byte > tempfile() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * name of temp file for compare mode output<br>
	 * C type : char*
	 */
	@Field(2) 
	public L_RegParams tempfile(Pointer<Byte > tempfile) {
		this.io.setPointerField(this, 2, tempfile);
		return this;
	}
	/**
	 * generate, compare or display<br>
	 * C type : l_int32
	 */
	@Field(3) 
	public int mode() {
		return this.io.getIntField(this, 3);
	}
	/**
	 * generate, compare or display<br>
	 * C type : l_int32
	 */
	@Field(3) 
	public L_RegParams mode(int mode) {
		this.io.setIntField(this, 3, mode);
		return this;
	}
	/**
	 * index into saved files for this test; 0-based<br>
	 * C type : l_int32
	 */
	@Field(4) 
	public int index() {
		return this.io.getIntField(this, 4);
	}
	/**
	 * index into saved files for this test; 0-based<br>
	 * C type : l_int32
	 */
	@Field(4) 
	public L_RegParams index(int index) {
		this.io.setIntField(this, 4, index);
		return this;
	}
	/**
	 * overall result of the test<br>
	 * C type : l_int32
	 */
	@Field(5) 
	public int success() {
		return this.io.getIntField(this, 5);
	}
	/**
	 * overall result of the test<br>
	 * C type : l_int32
	 */
	@Field(5) 
	public L_RegParams success(int success) {
		this.io.setIntField(this, 5, success);
		return this;
	}
	/**
	 * 1 if in display mode; 0 otherwise<br>
	 * C type : l_int32
	 */
	@Field(6) 
	public int display() {
		return this.io.getIntField(this, 6);
	}
	/**
	 * 1 if in display mode; 0 otherwise<br>
	 * C type : l_int32
	 */
	@Field(6) 
	public L_RegParams display(int display) {
		this.io.setIntField(this, 6, display);
		return this;
	}
	/**
	 * marks beginning of the reg test<br>
	 * C type : L_TIMER
	 */
	@Field(7) 
	public Pointer<? > tstart() {
		return this.io.getPointerField(this, 7);
	}
	/**
	 * marks beginning of the reg test<br>
	 * C type : L_TIMER
	 */
	@Field(7) 
	public L_RegParams tstart(Pointer<? > tstart) {
		this.io.setPointerField(this, 7, tstart);
		return this;
	}
}
