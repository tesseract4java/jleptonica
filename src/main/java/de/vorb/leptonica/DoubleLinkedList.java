package de.vorb.leptonica;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : C:\Users\Paul\Studium\Masterarbeit\Entwicklung\VS2013\tesseract-vs2013\liblept\include\list.h:60</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class DoubleLinkedList extends Structure {
	/** C type : DoubleLinkedList* */
	public DoubleLinkedList.ByReference prev;
	/** C type : DoubleLinkedList* */
	public DoubleLinkedList.ByReference next;
	/** C type : void* */
	public Pointer data;
	public DoubleLinkedList() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("prev", "next", "data");
	}
	/**
	 * @param prev C type : DoubleLinkedList*<br>
	 * @param next C type : DoubleLinkedList*<br>
	 * @param data C type : void*
	 */
	public DoubleLinkedList(DoubleLinkedList.ByReference prev, DoubleLinkedList.ByReference next, Pointer data) {
		super();
		this.prev = prev;
		this.next = next;
		this.data = data;
	}
	public static class ByReference extends DoubleLinkedList implements Structure.ByReference {
		
	};
	public static class ByValue extends DoubleLinkedList implements Structure.ByValue {
		
	};
}
