package de.vorb.leptonica;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * Array of generic pointer arrays<br>
 * <i>native declaration : C:\Users\Paul\Studium\Masterarbeit\Entwicklung\VS2013\tesseract-vs2013\liblept\include\ptra.h:58</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class L_Ptraa extends Structure {
	/**
	 * size of allocated ptr array<br>
	 * C type : l_int32
	 */
	public int nalloc;
	/**
	 * array of ptra<br>
	 * C type : L_Ptra**
	 */
	public de.vorb.leptonica.L_Ptra.ByReference[] ptra;
	public L_Ptraa() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("nalloc", "ptra");
	}
	/**
	 * @param nalloc size of allocated ptr array<br>
	 * C type : l_int32<br>
	 * @param ptra array of ptra<br>
	 * C type : L_Ptra**
	 */
	public L_Ptraa(int nalloc, de.vorb.leptonica.L_Ptra.ByReference ptra[]) {
		super();
		this.nalloc = nalloc;
		if ((ptra.length != this.ptra.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ptra = ptra;
	}
	public static class ByReference extends L_Ptraa implements Structure.ByReference {
		
	};
	public static class ByValue extends L_Ptraa implements Structure.ByValue {
		
	};
}
