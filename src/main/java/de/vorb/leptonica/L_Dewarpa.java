package de.vorb.leptonica;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : C:\Users\Paul\Studium\Masterarbeit\Entwicklung\VS2013\tesseract-vs2013\liblept\include\dewarp.h:96</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class L_Dewarpa extends Structure {
	/**
	 * size of dewarp ptr array<br>
	 * C type : l_int32
	 */
	public int nalloc;
	/**
	 * maximum page number in array<br>
	 * C type : l_int32
	 */
	public int maxpage;
	/**
	 * array of ptrs to page dewarp<br>
	 * C type : L_Dewarp**
	 */
	public de.vorb.leptonica.L_Dewarp.ByReference[] dewarp;
	/**
	 * array of ptrs to cached dewarps<br>
	 * C type : L_Dewarp**
	 */
	public de.vorb.leptonica.L_Dewarp.ByReference[] dewarpcache;
	/**
	 * list of page numbers for pages<br>
	 * C type : Numa*
	 */
	public de.vorb.leptonica.Numa.ByReference namodels;
	/**
	 * with page models<br>
	 * list of page numbers with either<br>
	 * C type : Numa*
	 */
	public de.vorb.leptonica.Numa.ByReference napages;
	/**
	 * page models or ref page models<br>
	 * reduction factor of input: 1 or 2<br>
	 * C type : l_int32
	 */
	public int redfactor;
	/**
	 * disparity arrays sampling factor<br>
	 * C type : l_int32
	 */
	public int sampling;
	/**
	 * min number of long lines required<br>
	 * C type : l_int32
	 */
	public int minlines;
	/**
	 * max distance for getting ref pages<br>
	 * C type : l_int32
	 */
	public int maxdist;
	/**
	 * maximum abs line curvature,<br>
	 * C type : l_int32
	 */
	public int max_linecurv;
	/**
	 * in micro-units<br>
	 * minimum abs diff line curvature<br>
	 * C type : l_int32
	 */
	public int min_diff_linecurv;
	/**
	 * in micro-units<br>
	 * maximum abs diff line curvature<br>
	 * C type : l_int32
	 */
	public int max_diff_linecurv;
	/**
	 * in micro-units<br>
	 * maximum abs left or right edge<br>
	 * C type : l_int32
	 */
	public int max_edgecurv;
	/**
	 * curvature, in micro-units<br>
	 * maximum abs diff left-right<br>
	 * C type : l_int32
	 */
	public int max_diff_edgecurv;
	/**
	 * edge curvature, in micro-units<br>
	 * use both disparity arrays if<br>
	 * C type : l_int32
	 */
	public int useboth;
	/**
	 * available; just vertical otherwise<br>
	 * invalid models have been removed<br>
	 * C type : l_int32
	 */
	public int modelsready;
	public L_Dewarpa() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("nalloc", "maxpage", "dewarp", "dewarpcache", "namodels", "napages", "redfactor", "sampling", "minlines", "maxdist", "max_linecurv", "min_diff_linecurv", "max_diff_linecurv", "max_edgecurv", "max_diff_edgecurv", "useboth", "modelsready");
	}
	public static class ByReference extends L_Dewarpa implements Structure.ByReference {
		
	};
	public static class ByValue extends L_Dewarpa implements Structure.ByValue {
		
	};
}
