package de.vorb.leptonica;

import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

/**
 * <i>native declaration :
 * C:\Users\Paul\Studium\Masterarbeit\Entwicklung\VS2013\
 * tesseract-vs2013\liblept\include\dewarp.h:96</i><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a
 * href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("leptonica")
public class L_Dewarpa extends StructObject {
    static {
        BridJ.register();
    }

    /**
     * size of dewarp ptr array<br>
     * C type : l_int32
     */
    @Field(0)
    public int nalloc() {
        return this.io.getIntField(this, 0);
    }

    /**
     * size of dewarp ptr array<br>
     * C type : l_int32
     */
    @Field(0)
    public L_Dewarpa nalloc(int nalloc) {
        this.io.setIntField(this, 0, nalloc);
        return this;
    }

    /**
     * maximum page number in array<br>
     * C type : l_int32
     */
    @Field(1)
    public int maxpage() {
        return this.io.getIntField(this, 1);
    }

    /**
     * maximum page number in array<br>
     * C type : l_int32
     */
    @Field(1)
    public L_Dewarpa maxpage(int maxpage) {
        this.io.setIntField(this, 1, maxpage);
        return this;
    }

    /**
     * array of ptrs to page dewarp<br>
     * C type : L_Dewarp**
     */
    @Field(2)
    public Pointer<Pointer<L_Dewarp>> dewarp() {
        return this.io.getPointerField(this, 2);
    }

    /**
     * array of ptrs to page dewarp<br>
     * C type : L_Dewarp**
     */
    @Field(2)
    public L_Dewarpa dewarp(Pointer<Pointer<L_Dewarp>> dewarp) {
        this.io.setPointerField(this, 2, dewarp);
        return this;
    }

    /**
     * array of ptrs to cached dewarps<br>
     * C type : L_Dewarp**
     */
    @Field(3)
    public Pointer<Pointer<L_Dewarp>> dewarpcache() {
        return this.io.getPointerField(this, 3);
    }

    /**
     * array of ptrs to cached dewarps<br>
     * C type : L_Dewarp**
     */
    @Field(3)
    public L_Dewarpa dewarpcache(Pointer<Pointer<L_Dewarp>> dewarpcache) {
        this.io.setPointerField(this, 3, dewarpcache);
        return this;
    }

    /**
     * list of page numbers for pages<br>
     * C type : Numa*
     */
    @Field(4)
    public Pointer<Numa> namodels() {
        return this.io.getPointerField(this, 4);
    }

    /**
     * list of page numbers for pages<br>
     * C type : Numa*
     */
    @Field(4)
    public L_Dewarpa namodels(Pointer<Numa> namodels) {
        this.io.setPointerField(this, 4, namodels);
        return this;
    }

    /**
     * list of page numbers with either<br>
     * C type : Numa*
     */
    @Field(5)
    public Pointer<Numa> napages() {
        return this.io.getPointerField(this, 5);
    }

    /**
     * list of page numbers with either<br>
     * C type : Numa*
     */
    @Field(5)
    public L_Dewarpa napages(Pointer<Numa> napages) {
        this.io.setPointerField(this, 5, napages);
        return this;
    }

    /**
     * reduction factor of input: 1 or 2<br>
     * C type : l_int32
     */
    @Field(6)
    public int redfactor() {
        return this.io.getIntField(this, 6);
    }

    /**
     * reduction factor of input: 1 or 2<br>
     * C type : l_int32
     */
    @Field(6)
    public L_Dewarpa redfactor(int redfactor) {
        this.io.setIntField(this, 6, redfactor);
        return this;
    }

    /**
     * disparity arrays sampling factor<br>
     * C type : l_int32
     */
    @Field(7)
    public int sampling() {
        return this.io.getIntField(this, 7);
    }

    /**
     * disparity arrays sampling factor<br>
     * C type : l_int32
     */
    @Field(7)
    public L_Dewarpa sampling(int sampling) {
        this.io.setIntField(this, 7, sampling);
        return this;
    }

    /**
     * min number of long lines required<br>
     * C type : l_int32
     */
    @Field(8)
    public int minlines() {
        return this.io.getIntField(this, 8);
    }

    /**
     * min number of long lines required<br>
     * C type : l_int32
     */
    @Field(8)
    public L_Dewarpa minlines(int minlines) {
        this.io.setIntField(this, 8, minlines);
        return this;
    }

    /**
     * max distance for getting ref pages<br>
     * C type : l_int32
     */
    @Field(9)
    public int maxdist() {
        return this.io.getIntField(this, 9);
    }

    /**
     * max distance for getting ref pages<br>
     * C type : l_int32
     */
    @Field(9)
    public L_Dewarpa maxdist(int maxdist) {
        this.io.setIntField(this, 9, maxdist);
        return this;
    }

    /**
     * maximum abs line curvature,<br>
     * C type : l_int32
     */
    @Field(10)
    public int max_linecurv() {
        return this.io.getIntField(this, 10);
    }

    /**
     * maximum abs line curvature,<br>
     * C type : l_int32
     */
    @Field(10)
    public L_Dewarpa max_linecurv(int max_linecurv) {
        this.io.setIntField(this, 10, max_linecurv);
        return this;
    }

    /**
     * minimum abs diff line curvature<br>
     * C type : l_int32
     */
    @Field(11)
    public int min_diff_linecurv() {
        return this.io.getIntField(this, 11);
    }

    /**
     * minimum abs diff line curvature<br>
     * C type : l_int32
     */
    @Field(11)
    public L_Dewarpa min_diff_linecurv(int min_diff_linecurv) {
        this.io.setIntField(this, 11, min_diff_linecurv);
        return this;
    }

    /**
     * maximum abs diff line curvature<br>
     * C type : l_int32
     */
    @Field(12)
    public int max_diff_linecurv() {
        return this.io.getIntField(this, 12);
    }

    /**
     * maximum abs diff line curvature<br>
     * C type : l_int32
     */
    @Field(12)
    public L_Dewarpa max_diff_linecurv(int max_diff_linecurv) {
        this.io.setIntField(this, 12, max_diff_linecurv);
        return this;
    }

    /**
     * maximum abs left or right edge<br>
     * C type : l_int32
     */
    @Field(13)
    public int max_edgecurv() {
        return this.io.getIntField(this, 13);
    }

    /**
     * maximum abs left or right edge<br>
     * C type : l_int32
     */
    @Field(13)
    public L_Dewarpa max_edgecurv(int max_edgecurv) {
        this.io.setIntField(this, 13, max_edgecurv);
        return this;
    }

    /**
     * maximum abs diff left-right<br>
     * C type : l_int32
     */
    @Field(14)
    public int max_diff_edgecurv() {
        return this.io.getIntField(this, 14);
    }

    /**
     * maximum abs diff left-right<br>
     * C type : l_int32
     */
    @Field(14)
    public L_Dewarpa max_diff_edgecurv(int max_diff_edgecurv) {
        this.io.setIntField(this, 14, max_diff_edgecurv);
        return this;
    }

    /**
     * use both disparity arrays if<br>
     * C type : l_int32
     */
    @Field(15)
    public int useboth() {
        return this.io.getIntField(this, 15);
    }

    /**
     * use both disparity arrays if<br>
     * C type : l_int32
     */
    @Field(15)
    public L_Dewarpa useboth(int useboth) {
        this.io.setIntField(this, 15, useboth);
        return this;
    }

    /**
     * invalid models have been removed<br>
     * C type : l_int32
     */
    @Field(16)
    public int modelsready() {
        return this.io.getIntField(this, 16);
    }

    /**
     * invalid models have been removed<br>
     * C type : l_int32
     */
    @Field(16)
    public L_Dewarpa modelsready(int modelsready) {
        this.io.setIntField(this, 16, modelsready);
        return this;
    }

    public L_Dewarpa() {
        super();
    }

    public L_Dewarpa(Pointer pointer) {
        super(pointer);
    }
}
